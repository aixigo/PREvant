openapi: 3.0.0
servers:
  - url: 'https://github.com/aixigo/PREvant'
info:
  description: >-
    The PREvant RESTful API allows to see and manipulate the deployed apps that are ready for reviewing purposes.
  version: 1.0.0
  title: PREvant RESTful API
  contact:
    name: Marc Schreiber
    email: marc.schreiber@aixigo.de
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
paths:
  /apps/:
    get:
      summary: List deployed review apps.
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  "^[a-zA-Z0-9_-]":
                    $ref: '#/components/schemas/Service'
        '500':
          description: Server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /apps/tickets/:
    get:
      summary: Provides ticket information to each review app
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  "^[a-zA-Z0-9_-]":
                    $ref: '#/components/schemas/Ticket'
        '204':
          description: 'No ticket system configuration'
        '500':
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /apps/{appName}:
    post:
      summary: Start or update a new review app.
      parameters:
        - in: path
          name: appName
          allowEmptyValue: false
          schema:
            type: string
          required: true
          description: Name of review app to create
        - in: query
          name: replicateFrom
          schema:
            type: string
            default: 'master'
          description: The application name that will be used to replicate from.
        - $ref: '#/components/parameters/preferAsync'
      requestBody:
        description: >
           A list of service configuration that will be included in the application.
           <p>
           The example provides two services: a database and a wordpress
           instance which can also be replicated via the UI. Make sure that
           you adjust the values for `WP_HOME` and `WP_SITE` to match the
           host URL of your PREvant instance.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ServiceConfiguration'
            example: |
               [{
                  "serviceName": "db",
                  "image": "mariadb",
                  "env": {
                     "MARIADB_ROOT_PASSWORD": {
                        "value": "example",
                        "replicate": true
                     },
                     "MARIADB_USER": {
                        "value": "example-user",
                        "replicate": true
                     },
                     "MARIADB_PASSWORD": {
                        "value": "my_cool_secret",
                        "replicate": true
                     },
                     "MARIADB_DATABASE": {
                        "value": "example-database",
                        "replicate": true
                     }
                  }
               }, {
                  "serviceName": "blog",
                  "image": "wordpress",
                  "env": {
                     "WORDPRESS_DB_HOST": {
                        "value": "db",
                        "replicate": true
                     },
                     "WORDPRESS_DB_USER": {
                        "value": "example-user",
                        "replicate": true
                     },
                     "WORDPRESS_DB_PASSWORD": {
                        "value": "my_cool_secret",
                        "replicate": true
                     },
                     "WORDPRESS_DB_NAME": {
                        "value": "example-database",
                        "replicate": true
                     },
                     "WORDPRESS_CONFIG_EXTRA": {
                        "value": "define('WP_HOME','http://localhost');\ndefine('WP_SITEURL','http://localhost/{{application.name}}/blog');",
                        "replicate": true,
                        "templated": true
                     }
                  }
               }]
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '202':
          description: >-
            Accepted. The deployment is being processed asynchronously. The current state of the action
            can be polled at the url pointed to by the Location header.
          headers:
            Location:
              description: The url of the queued task
              schema:
                type: string
                format: url
        '409':
          description: The application is currently in deployment. A parallel deployment of two apps is not allowed.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      summary: Shutdown a review app
      parameters:
        - $ref: '#/components/parameters/appName'
        - $ref: '#/components/parameters/preferAsync'
      responses:
        '200':
          description: 'List of deleted containers'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '202':
          description: >-
            Accepted. The shutdown is being processed asynchronously. The current state of the action
            can be polled at the url pointed to by the Location header.
          headers:
            Location:
              description: The url of the queued task
              schema:
                type: string
                format: url
        '404':
          description: Cannot find app
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /apps/{appName}/states/{serviceName}/:
    put:
      summary: Changes the state of a service
      parameters:
        - $ref: '#/components/parameters/appName'
        - $ref: '#/components/parameters/serviceName'
      requestBody:
        description: The new state of the service
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/State'
      responses:
        '202':
          description: The state change has been accepted
        '404':
          description: Cannot find app or cannot find service.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /apps/{appName}/logs/{serviceName}/:
    get:
      summary: Retrieves the logs from stdout/stderr of the specified container.
      parameters:
        - $ref: '#/components/parameters/appName'
        - $ref: '#/components/parameters/serviceName'
        - in: query
          name: since
          description: >-
            Date and time since when the logs have to retrieved. By default the logs from the beginning are crawled.
          schema:
            type: string
            format: date-time
          example: '2019-07-22T08:42:47-00:00'
        - in: query
          name: limit
          description: The number of log lines to retrieve. If not present, all the lines from `since` are retrieved.
          schema:
            type: integer
        - in: query
          name: asAttachment
          description: >-
            Determines how the response is presented by the browser. When `true`, the response content is provided as a downloadable attachment.
            If `false` or not provided, the response is displayed inline.
          schema:
            type: boolean
      responses:
        '200':
          description: | 
            The available log statements. MIME type `text/event-stream` supports streaming of logs.
          headers:
            Link:
              schema:
                type: string
              description: The links for pagination
              example: </apps/master/logs/service-a/?limit=1000&since=2019-07-22T08:42:47-00:00>;rel=next
          content:
            text/plain:
              schema:
                type: string
  /apps/{appName}/status-changes/{statusId}:
    parameters:
      - $ref: '#/components/parameters/appName'
      - name: statusId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Check if the given status change is still in progress
      description: >-
        Can be used to poll the completion of a status change, such as deploying or stopping an app.
      responses:
        '202':
          description: The status change is still running
        '404':
          description: The status change finished
  /webhooks/:
    post:
      summary: Cleans up apps when webhook triggers this resource.
      description: >-
        If a PR has been merged or declined, a webhook can trigger this resource in order to delete the
        corresponding review app. Currently supported are webhooks of Bitbucket:

        - [Merged](https://confluence.atlassian.com/bitbucketserver/event-payload-938025882.html#Eventpayload-Merged)

        - [Declined](https://confluence.atlassian.com/bitbucketserver/event-payload-938025882.html#Eventpayload-Declined)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BitbucketWebHookPayload'
      responses:
        '200':
          description: 'List of deleted containers'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '404':
          description: Cannot find app
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
components:
  parameters:
    appName:
      in: path
      name: appName
      allowEmptyValue: false
      schema:
        type: string
      required: true
      description: Name of the application
    serviceName:
      in: path
      name: serviceName
      description: Name of the service
      required: true
      schema:
        type: string
    preferAsync:
      in: header
      name: Prefer
      description: >-
        Whether the server should respond without waiting for completion
        (see [RFC-7240](https://tools.ietf.org/html/rfc7240) for details)
      required: false
      example:
        respond-async,wait=10
      schema:
        type: array
        minItems: 1
        maxItems: 2
        uniqueItems: true
        items:
          oneOf:
            - type: string
              description: Respond before the operation is finished
              pattern: ^respond-async$
              example: respond-async
            - type: string
              description: Wait the specified amount of seconds for the operation to finish
              pattern: ^wait=(\d+)$
              example: wait=20
  schemas:
    Service:
      type: object
      properties:
        name:
          type: string
          example: mariadb
        type:
          type: string
          enum:
            - instance
            - replica
            - app-companion
            - service-companion
          example: instance
        state:
          $ref: '#/components/schemas/State'
        version:
          $ref: '#/components/schemas/Version'
        url:
          type: string
          format: url
        openApiUrl:
          type: string
          format: url
          example: https://speca.io/speca/petstore-api
          description: The URL pointing to the OpenAPI specification of the service
      required:
        - name
        - type
        - version
    Version:
      type: object
      properties:
        gitCommit:
          type: string
          description: The git commit SHA hash of the service.
          example: '43de4c6edf3c7ed93cdf8983f1ea7d73115176cc'
        dateModified:
          type: string
          format: date-time
          description: The date and time when this service has been build.
          example: '2018-11-13T20:20:39+00:00'
        softwareVersion:
          type: string
          description: The human-readable version string, see [softwareVersion](https://schema.org/softwareVersion).
          example: '1.2.3'
    State:
      type: object
      properties:
        status:
          description: Indicate wether the service is running, paused, etc.
          type: string
          enum:
            - running
            - paused
    ServiceConfiguration:
      type: object
      properties:
        serviceName:
          type: string
          description: Name of the service to start
          example: mariadb
        image:
          type: string
          description: >-
            The docker image with `<repo-name>/<hub-user>/<repo-name>:<tag>`. `<repo-name>`, `<hub-user>` and `<tag>`
            are optional values.
          example: mariadb:10.3
        env:
          $ref: '#/components/schemas/EnvironmentConfiguration'
        volumes:
          type: object
          deprecated: true
          description: >-
            Files to be created in the the container.
            <p>
            The keys of this object are the paths in the container and the values contain the actual file content.
            <p>
            This field has been deprecated in favor of `files`. Kindly use `files` for future usage.
          example:
            "/etc/mysql/my.cnf": |
              [client-server]
              # Uncomment these if you want to use a nonstandard connection to MariaDB
              #socket=/tmp/mysql.sock
              #port=3306
        files:
          type: object
          description: >-
            Files to be created in the the container.
            <p>
            The keys of this object are the paths in the container and the values contain the actual file content.
            <p>
            This field replaces the deprecated `volumes`.
          example:
            "/etc/mysql/my.cnf": |
              [client-server]
              # Uncomment these if you want to use a nonstandard connection to MariaDB
              #socket=/tmp/mysql.sock
              #port=3306
      required:
        - serviceName
        - registry
    EnvironmentConfiguration:
      oneOf:
        - $ref: '#/components/schemas/EnvironmentValue'
        - type: array
          items:
            type: string
          description: Key value list of enviroment variables
          example:
            - MYSQL_USER=admin
            - MYSQL_DATABASE=dbname
    EnvironmentValue:
      type: object
      additionalProperties:
        oneOf:
          - type: string
          - type: object
            properties:
              value:
                type: string
              templated:
                type: boolean
              replicate:
                type: boolean
            required:
              - value
            example: { "value": "admin-{{application.name}}", "templated": true, "replicate": true }
      description: Key value object of enviroment variables
      example:
        "MYSQL_USER": "admin"
    Ticket:
      type: object
      properties:
        link:
          type: string
          format: uri
          description: Link to the ticket in the ticket system.
        summary:
          type: string
          description: Brief description of the ticket
        status:
          type: string
          description: ticket status, for example, `closed`, `review`, …
    BitbucketWebHookPayload:
      type: object
      description: Excerpt of Bitbucket's [event payload](https://confluence.atlassian.com/bitbucketserver/event-payload-938025882.html)
      properties:
        pullRequest:
          type: object
          properties:
            title:
              type: string
              description: Title description the pull request.
            fromRef:
              type: object
              properties:
                displayId:
                  type: string
                  description: The branch name containing the ticket number `XXX-123`.
                  example: 'feature/XXX-123-some-feature-branch'
    ProblemDetails:
      type: object
      description: Defines a "problem detail" according to [RFC 7807](https://tools.ietf.org/html/rfc7807).
      properties:
        type:
          type: string
        status:
          type: integer
        title:
          type: string
        detail:
          type: string
